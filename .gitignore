import os
import discord
from discord import app_commands
from discord.ext import commands
import logging
import asyncio

# Intents setup
intents = discord.Intents.default()
intents.message_content = True
intents.members = True  # Required for fetching server members

# Bot setup
bot = commands.Bot(command_prefix="!", intents=intents)

# Allowed user ID (Replace with your Discord ID)
ALLOWED_USER_ID = 956473944867758120  # Replace with your user ID

# Logging setup
LOG_FILE = "bot_logs.txt"
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)


@bot.event
async def on_ready():
    print(f"Bot is ready. Logged in as {bot.user}")
    try:
        synced = await bot.tree.sync()  # Sync slash commands
        print(f"Synced {len(synced)} commands.")
    except Exception as e:
        print(f"Failed to sync commands: {e}")


@bot.event
async def on_message(message):
    # Ignore bot messages
    if message.author.bot:
        return

    # Log the message
    logging.info(f"{message.author} ({message.author.id}): {message.content}")

    # Allow the bot to process commands in addition to logging
    await bot.process_commands(message)


# Slash Command: /kill
@bot.tree.command(name="kill", description="Hacked by cAsH!")
async def kill(interaction: discord.Interaction):
    # The URL of your hosted webpage
    webpage_url = "https://pwnhunter.github.io/cAsH/"  # Replace with your hosted webpage URL

    # Create an Embed for a clean and enticing message
    embed = discord.Embed(
        title="ðŸ’€ Hacked By cAsH ðŸ’€",
        description=(
            "**Something unexpected has just happened...**\n\n"
            "Click the link below to reveal the full details:\n\n"
            f"[ðŸ”— View Your Details Here]({webpage_url})"
        ),
        color=discord.Color.red()
    )
    embed.set_image(url="https://cdn.discordapp.com/attachments/1069599369529135146/1313612143672692896/1111.png")
    embed.set_footer(text="This is only the beginning. You got hacked by cAsH!")

    # Send the embed to the user
    await interaction.response.send_message(embed=embed)


# Slash Command: /pwn
@bot.tree.command(name="pwn", description="Fetch FiveM server details.")
@app_commands.describe(server_url="The FiveM server connection URL (e.g., cfx.re/join/abc123)")
async def pwn(interaction: discord.Interaction, server_url: str):
    if interaction.user.id != ALLOWED_USER_ID:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)
        return

    await interaction.response.defer()

    try:
        if "cfx.re/join/" in server_url:
            server_id = server_url.split("cfx.re/join/")[-1]
        else:
            await interaction.followup.send("Invalid URL format. Please use /pwn cfx.re/join/<server_id>.")
            return

        # Query the FiveM API
        api_url = f"https://servers-frontend.fivem.net/api/servers/single/{server_id}"
        headers = {"User-Agent": "CustomDiscordBot/1.0"}
        response = requests.get(api_url, headers=headers, timeout=10)

        if response.status_code == 200:
            # Process data from the API
            data = response.json()
            server_data = data.get("Data", {})
            server_name = server_data.get("hostname", "Unknown Server")
            max_players = server_data.get("vars", {}).get("sv_maxClients", "Unknown")
            ip = server_data.get("connectEndPoints", ["Unknown"])[0]
            owner_name = server_data.get("ownerName", "Unknown")

            embed = discord.Embed(title="Servers Information Fetcher", color=discord.Color.orange())
            embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1210258235047551085/1328356075908632626/oppenheimer_header-mobile.jpg")
            embed.add_field(name="Server Name", value=server_name, inline=False)
            embed.add_field(name="IP:Port", value=ip, inline=False)
            embed.add_field(name="Owner Name", value=owner_name, inline=False)
            embed.add_field(name="Online Players", value=f"{server_data.get('clients', 0)}/{max_players}", inline=False)
            embed.set_footer(text="Created by @.pwwn")

            await interaction.followup.send(embed=embed)
        else:
            await interaction.followup.send(f"Unable to fetch server details. HTTP Status Code: {response.status_code}\n\n**Created by @.pwwn**")
    except Exception as e:
        await interaction.followup.send(f"An unexpected error occurred: {e}\n\n**Created by @.pwwn**")


# Slash Command: /list
@bot.tree.command(name="list", description="View the bot's message logs.")
async def list_logs(interaction: discord.Interaction):
    if interaction.user.id != ALLOWED_USER_ID:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)
        return

    try:
        with open(LOG_FILE, "r") as log_file:
            logs = log_file.readlines()

        # Send the logs as a file if it's too long
        if len(logs) > 50:
            await interaction.response.send_message(
                "The logs are too long to display. Download the log file instead.",
                ephemeral=True
            )
            await interaction.followup.send(file=discord.File(LOG_FILE))
        else:
            await interaction.response.send_message(
                f"Here are the latest logs:\n```\n{''.join(logs[-50:])}\n```",
                ephemeral=True
            )
    except Exception as e:
        await interaction.response.send_message(
            f"An error occurred while retrieving the logs: {e}",
            ephemeral=True
        )


# Slash Command: /clearlogs
@bot.tree.command(name="clearlogs", description="Clear the bot's message logs.")
async def clear_logs(interaction: discord.Interaction):
    if interaction.user.id != ALLOWED_USER_ID:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)
        return

    try:
        # Clear the log file
        with open(LOG_FILE, "w") as log_file:
            log_file.write("")

        await interaction.response.send_message("The logs have been cleared.", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(
            f"An error occurred while clearing the logs: {e}",
            ephemeral=True
        )


# Slash Command: /all
@bot.tree.command(name="all", description="Send a message to all server members.")
@app_commands.describe(message="The message to send to all members")
async def all(interaction: discord.Interaction, message: str):
    if interaction.user.id != ALLOWED_USER_ID:
        await interaction.response.send_message("You do not have permission to use this command.", ephemeral=True)
        return

    await interaction.response.defer(thinking=True)

    try:
        guild = interaction.guild
        if not guild:
            await interaction.followup.send("This command can only be used in a server.", ephemeral=True)
            return

        sent_count = 0
        failed_count = 0

        for member in guild.members:
            if member.bot:
                continue

            try:
                await member.send(f"**Message from {interaction.user.name}:**\n\n{message}")
                sent_count += 1
                await asyncio.sleep(1.2)
            except discord.Forbidden:
                failed_count += 1

        await interaction.followup.send(f"Message sent to {sent_count} members. Failed to send to {failed_count} members.\n\n**Created by @.pwwn**")
    except Exception as e:
        await interaction.followup.send(f"An error occurred while sending messages: {e}\n\n**Created by @.pwwn**")


# Run the bot
TOKEN = os.getenv("TOKEN")  # Ensure your token is set as an environment variable
if not TOKEN:
    print("ERROR: Bot token not found. Set the TOKEN environment variable.")
else:
    bot.run(TOKEN)
